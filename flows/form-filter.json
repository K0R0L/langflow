{
  "access_type": "PRIVATE",
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DirectoryPath",
            "id": "DirectoryPath-0teKE",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "paths",
            "id": "FormFilter-MQcl3",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__DirectoryPath-0teKE{œdataTypeœ:œDirectoryPathœ,œidœ:œDirectoryPath-0teKEœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-FormFilter-MQcl3{œfieldNameœ:œpathsœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "DirectoryPath-0teKE",
        "sourceHandle": "{œdataTypeœ:œDirectoryPathœ,œidœ:œDirectoryPath-0teKEœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "FormFilter-MQcl3",
        "targetHandle": "{œfieldNameœ:œpathsœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "output",
            "id": "output-qAuJW",
            "name": "output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "output_keys",
            "id": "FormFilter-MQcl3",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__output-qAuJW{œdataTypeœ:œoutputœ,œidœ:œoutput-qAuJWœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-FormFilter-MQcl3{œfieldNameœ:œoutput_keysœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "output-qAuJW",
        "sourceHandle": "{œdataTypeœ:œoutputœ,œidœ:œoutput-qAuJWœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}",
        "target": "FormFilter-MQcl3",
        "targetHandle": "{œfieldNameœ:œoutput_keysœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Exist",
            "id": "Exist-7L86m",
            "name": "output",
            "output_types": [
              "Component"
            ]
          },
          "targetHandle": {
            "fieldName": "fields",
            "id": "FormFilter-MQcl3",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__Exist-7L86m{œdataTypeœ:œExistœ,œidœ:œExist-7L86mœ,œnameœ:œoutputœ,œoutput_typesœ:[œComponentœ]}-FormFilter-MQcl3{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Exist-7L86m",
        "sourceHandle": "{œdataTypeœ:œExistœ,œidœ:œExist-7L86mœ,œnameœ:œoutputœ,œoutput_typesœ:[œComponentœ]}",
        "target": "FormFilter-MQcl3",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "FormFilter",
            "id": "FormFilter-MQcl3",
            "name": "data_list",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "dict_list",
            "id": "DataToText-waGS1",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__FormFilter-MQcl3{œdataTypeœ:œFormFilterœ,œidœ:œFormFilter-MQcl3œ,œnameœ:œdata_listœ,œoutput_typesœ:[œDataœ]}-DataToText-waGS1{œfieldNameœ:œdict_listœ,œidœ:œDataToText-waGS1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "FormFilter-MQcl3",
        "sourceHandle": "{œdataTypeœ:œFormFilterœ,œidœ:œFormFilter-MQcl3œ,œnameœ:œdata_listœ,œoutput_typesœ:[œDataœ]}",
        "target": "DataToText-waGS1",
        "targetHandle": "{œfieldNameœ:œdict_listœ,œidœ:œDataToText-waGS1œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DataToText",
            "id": "DataToText-waGS1",
            "name": "output",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-CFyH6",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__DataToText-waGS1{œdataTypeœ:œDataToTextœ,œidœ:œDataToText-waGS1œ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-ChatOutput-CFyH6{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-CFyH6œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "DataToText-waGS1",
        "sourceHandle": "{œdataTypeœ:œDataToTextœ,œidœ:œDataToText-waGS1œ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}",
        "target": "ChatOutput-CFyH6",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-CFyH6œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "date_field_filter",
            "id": "date_field_filter-KqnBs",
            "name": "data",
            "output_types": [
              "Component"
            ]
          },
          "targetHandle": {
            "fieldName": "fields",
            "id": "FormFilter-MQcl3",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__date_field_filter-KqnBs{œdataTypeœ:œdate_field_filterœ,œidœ:œdate_field_filter-KqnBsœ,œnameœ:œdataœ,œoutput_typesœ:[œComponentœ]}-FormFilter-MQcl3{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "date_field_filter-KqnBs",
        "sourceHandle": "{œdataTypeœ:œdate_field_filterœ,œidœ:œdate_field_filter-KqnBsœ,œnameœ:œdataœ,œoutput_typesœ:[œComponentœ]}",
        "target": "FormFilter-MQcl3",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "check_box",
            "id": "check_box-WPzJ3",
            "name": "output",
            "output_types": [
              "Component"
            ]
          },
          "targetHandle": {
            "fieldName": "fields",
            "id": "FormFilter-MQcl3",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__check_box-WPzJ3{œdataTypeœ:œcheck_boxœ,œidœ:œcheck_box-WPzJ3œ,œnameœ:œoutputœ,œoutput_typesœ:[œComponentœ]}-FormFilter-MQcl3{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "check_box-WPzJ3",
        "sourceHandle": "{œdataTypeœ:œcheck_boxœ,œidœ:œcheck_box-WPzJ3œ,œnameœ:œoutputœ,œoutput_typesœ:[œComponentœ]}",
        "target": "FormFilter-MQcl3",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-MQcl3œ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatOutput-CFyH6",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-CFyH6",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": -284.1107425352258,
          "y": 461.4008562570655
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "DirectoryPath-0teKE",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Retrieve paths from a folder.",
            "display_name": "Directory Paths",
            "documentation": "",
            "edited": false,
            "field_order": [
              "path",
              "types",
              "depth",
              "load_hidden",
              "recursive",
              "silent_errors"
            ],
            "frozen": false,
            "icon": "folder",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "load_directory",
                "name": "data",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import (\n    TEXT_FILE_TYPES,\n    retrieve_file_paths,\n)\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, IntInput, MessageTextInput, MultiselectInput\nfrom langflow.schema import Data\nfrom langflow.template import Output\n\n\nclass DirectoryPathComponent(Component):\n    display_name = \"Directory Paths\"\n    description = \"Retrieve paths from a folder.\"\n    icon = \"folder\"\n    name = \"DirectoryPath\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"path\",\n            display_name=\"Path\",\n            info=\"Path to the directory to load files from. Defaults to current directory ('.')\",\n            value=\".\",\n            input_types=[],\n            tool_mode=True,\n        ),\n        MultiselectInput(\n            name=\"types\",\n            display_name=\"File Types\",\n            info=\"File types to load. Select one or more types or leave empty to load all supported types.\",\n            options=TEXT_FILE_TYPES,\n            value=[],\n        ),\n        IntInput(\n            name=\"depth\",\n            display_name=\"Depth\",\n            advanced=True,\n            info=\"Depth to search for files.\",\n            value=0,\n        ),\n        BoolInput(\n            name=\"load_hidden\",\n            display_name=\"Load Hidden\",\n            advanced=True,\n            info=\"If true, hidden files will be loaded.\",\n        ),\n        BoolInput(\n            name=\"recursive\",\n            display_name=\"Recursive\",\n            advanced=True,\n            info=\"If true, the search will be recursive.\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_directory\"),\n    ]\n\n    def load_directory(self) -> list[Data]:\n        path = self.path\n        types = self.types\n        depth = self.depth\n        load_hidden = self.load_hidden\n        recursive = self.recursive\n\n        resolved_path = self.resolve_path(path)\n\n        if not types:\n            types = TEXT_FILE_TYPES\n\n        invalid_types = [t for t in types if t not in TEXT_FILE_TYPES]\n        if invalid_types:\n            msg = f\"Invalid file types specified: {invalid_types}. Valid types are: {TEXT_FILE_TYPES}\"\n            raise ValueError(msg)\n\n        valid_types = types\n\n        file_paths = retrieve_file_paths(\n            resolved_path,\n            load_hidden=load_hidden,\n            recursive=recursive,\n            depth=depth,\n            types=valid_types,\n        )\n\n        return file_paths\n"
              },
              "depth": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Depth",
                "dynamic": false,
                "info": "Depth to search for files.",
                "list": false,
                "list_add_label": "Add More",
                "name": "depth",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "load_hidden": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Load Hidden",
                "dynamic": false,
                "info": "If true, hidden files will be loaded.",
                "list": false,
                "list_add_label": "Add More",
                "name": "load_hidden",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "path": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Path",
                "dynamic": false,
                "info": "Path to the directory to load files from. Defaults to current directory ('.')",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": true,
                "name": "path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "onlyoffice_test"
              },
              "recursive": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Recursive",
                "dynamic": false,
                "info": "If true, the search will be recursive.",
                "list": false,
                "list_add_label": "Add More",
                "name": "recursive",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "silent_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "list_add_label": "Add More",
                "name": "silent_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "types": {
                "_input_type": "MultiselectInput",
                "advanced": false,
                "combobox": false,
                "display_name": "File Types",
                "dynamic": false,
                "info": "File types to load. Select one or more types or leave empty to load all supported types.",
                "list": true,
                "list_add_label": "Add More",
                "name": "types",
                "options": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": [
                  "pdf"
                ]
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DirectoryPath"
        },
        "dragging": false,
        "id": "DirectoryPath-0teKE",
        "measured": {
          "height": 311,
          "width": 320
        },
        "position": {
          "x": -2242.4178858797914,
          "y": 3.020203061889333
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "DataToText-waGS1",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Converts data into text.",
            "display_name": "Data To Text",
            "documentation": "",
            "edited": false,
            "field_order": [
              "dict_list"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text",
                "hidden": false,
                "method": "build_output",
                "name": "output",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import Output, DataInput\nfrom langflow.schema import Data\n\nclass DataToTextComponent(Component):\n    display_name = \"Data To Text\"\n    name = \"DataToText\"\n    icon = \"braces\"\n    description: str = \"Converts data into text.\"\n    inputs = [\n        DataInput(\n            name=\"dict_list\",\n            display_name=\"Data\",\n            info=\"List of dictionaries to process.\",\n            input_types=[\"Data\"],\n            required=True,\n        ),\n    ]\n    outputs: list[Output] = [Output(display_name=\"Text\", name=\"output\", method=\"build_output\")]\n\n    def get_text_from_processed_data(self, processed_data: list[str]) -> str:\n        \"\"\"Convert processed_data into a readable text format.\"\"\"\n        text_lines = []\n        for person in processed_data:\n            for key, record in person.items():\n                text_lines.append(f\"  {key}: {record}\")\n                text_lines.append(\"\")\n    \n        return \"\\n\".join(text_lines)\n         \n    def build_output(self) -> Data:\n        #msg = f\"{self.dict_list}\"\n        #raise ValueError(msg)\n        fields = self.dict_list.data[\"items\"]\n        text = f\"{self.get_text_from_processed_data(fields)}\"\n        return text\n"
              },
              "dict_list": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "List of dictionaries to process.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "dict_list",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DataToText"
        },
        "dragging": false,
        "id": "DataToText-waGS1",
        "measured": {
          "height": 191,
          "width": 320
        },
        "position": {
          "x": -903.4912441543171,
          "y": 349.6042433242367
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "FormFilter-MQcl3",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Filters the specified forms based on the specified criteria.",
            "display_name": "Form Filter",
            "documentation": "",
            "edited": false,
            "field_order": [
              "paths",
              "fields",
              "output_keys"
            ],
            "frozen": false,
            "icon": "filter",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_data",
                "name": "data_list",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Paths",
                "method": "load_directory",
                "name": "paths_list",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.docbuilder import docbuilder\nfrom langflow.inputs import Input\nfrom langflow.inputs.inputs import (\n    DataInput,\n)\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\nSTANDARD_ENCODE_FORMAT = (\n    \"<m_nCsvTxtEncoding>0</m_nCsvTxtEncoding><m_nCsvDelimiter>0</m_nCsvDelimiter>\"\n)\n\n\nclass FormFilterComponent(Component):\n    display_name: str = \"Form Filter\"\n    description: str = \"Filters the specified forms based on the specified criteria.\"\n    name: str = \"FormFilter\"\n    icon = \"filter\"\n    inputs = [\n        DataInput(\n            name=\"paths\",\n            display_name=\"File Paths\",\n            info=\"List of file paths to process.\",\n            is_list=True,\n            required=True,\n        ),\n        Input(\n            name=\"fields\",\n            display_name=\"Criteria\",\n            input_types=[\"Component\"],\n            component=Component,\n            is_list=True,\n        ),\n        DataInput(\n            name=\"output_keys\",\n            display_name=\"Output keys\",\n            info=\"List of fields to extract from the files.\",\n            input_types=[\"Data\"],\n            value=None,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data_list\", method=\"build_data\"),\n        Output(display_name=\"Paths\", name=\"paths_list\", method=\"load_directory\"),\n    ]\n\n    def get_form_value(self, forms, key, tag=None) -> str | int | bool | None:\n        for i in range(forms.GetLength()):\n            form = forms.Get(i)\n            form_key = form.GetFormKey().ToString()\n            if form_key == key:\n                form_type = form.GetFormType().ToString()\n                if form_type == \"textForm\":\n                    return form.GetText().ToString()\n                elif form_type == \"dateForm\":\n                    return form.GetTime().ToDouble()\n                elif form_type == \"checkBoxForm\":\n                    return form.IsChecked().ToBool()\n        return None\n\n    def build_main(self) -> list[dict]:\n        \n        file_paths: list[str] = self.paths\n\n\n        filters: list[Component] = self.fields\n        output_keys: list[str] = (\n            self.output_keys.data[\"output_keys\"] if self.output_keys else None\n        )\n        result: list[dict] = []\n\n        for file_path in file_paths:\n            if isinstance(file_path, Data):\n                file_path: str = file_path.text\n            builder = docbuilder.CDocBuilder()\n\n            builder.OpenFile(file_path, STANDARD_ENCODE_FORMAT)\n   \n            context: docbuilder.CDocBuilderContext = builder.GetContext()\n            globalObj: docbuilder.CDocBuilderValue = context.GetGlobal()\n            api: docbuilder.CDocBuilderValue | None = globalObj[\"Api\"]\n            document: docbuilder.CDocBuilderValue | None = api.GetDocument()\n            forms: docbuilder.CDocBuilderValue | None = document.GetAllForms()\n            passed: bool= True\n            for filter_component in filters:\n                if hasattr(filter_component, \"process\"):\n                    if not filter_component.process(api, forms, self.get_form_value):\n                        passed = False\n                        break\n            if passed:\n                record = {\"file_path\": file_path}\n                if output_keys:\n                    for key in output_keys:\n                        value: str | int | bool | None = self.get_form_value(forms, key)\n                        record[key] = value\n                result.append(record)\n            builder.CloseFile()\n        return result\n\n    def build_data(self) -> Data:\n        processed_data = self.build_main()\n        return Data(data={\"items\": processed_data})\n\n    def load_directory(self) -> list[Data]:\n        processed_data = self.build_main()\n        file_paths = [record[\"file_path\"] for record in processed_data]\n        return file_paths\n"
              },
              "fields": {
                "advanced": false,
                "display_name": "Criteria",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Component"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "fields",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "output_keys": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Output keys",
                "dynamic": false,
                "info": "List of fields to extract from the files.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "output_keys",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other"
              },
              "paths": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "File Paths",
                "dynamic": false,
                "info": "List of file paths to process.",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "paths",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "FormFilter"
        },
        "dragging": false,
        "id": "FormFilter-MQcl3",
        "measured": {
          "height": 393,
          "width": 320
        },
        "position": {
          "x": -1325.5165348202938,
          "y": -8.586143154053644
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "output-qAuJW",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Specifies the keys to be displayed.",
            "display_name": "Output Keys",
            "documentation": "",
            "edited": false,
            "field_order": [
              "number_of_fields"
            ],
            "frozen": false,
            "icon": "table",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Filtered Data",
                "hidden": false,
                "method": "build_output",
                "name": "output",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.inputs.inputs import IntInput, MessageTextInput\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.schema.dotdict import dotdict\n\n\nclass OutputKeysComponent(Component):\n    display_name = \"Output Keys\"\n    name = \"output\"\n    MAX_FIELDS = 15\n    description: str = \"Specifies the keys to be displayed.\"\n    icon = \"table\"\n    inputs = [\n        IntInput(\n            name=\"number_of_fields\",\n            display_name=\"Number of Keys\",\n            info=\"Number of Keys to be added to the record.\",\n            real_time_refresh=True,\n            value=1,\n            input_types=[],\n            range_spec=RangeSpec(\n                min=1, max=MAX_FIELDS, step=1, step_type=\"int\"\n            ),\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Filtered Data\", name=\"output\", method=\"build_output\"\n        )\n    ]\n\n    def update_build_config(\n        self, build_config: dotdict, field_value, field_name=None\n    ) -> dotdict:\n        if field_name == \"number_of_fields\":\n            default_keys = {\"code\", \"_type\", \"number_of_fields\", \"data\"}\n            try:\n                field_value_int = int(field_value)\n            except ValueError:\n                return build_config\n            if field_value_int > self.MAX_FIELDS:\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\n                raise ValueError(\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}.\"\n                )\n\n            existing_fields = {}\n            for key in list(build_config.keys()):\n                if key not in default_keys:\n                    existing_fields[key] = build_config.pop(key)\n\n            for i in range(1, field_value_int + 1):\n                key = f\"field_{i}_name\"\n                if key in existing_fields:\n                    field = existing_fields[key]\n                    build_config[key] = field\n                else:\n                    field = MessageTextInput(\n                        display_name=f\"Key {i} Name\",\n                        name=key,\n                        input_types=[],\n                        info=f\"Name of key {i} that you want to output.\",\n                    )\n                    build_config[field.name] = field.to_dict()\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\n        return build_config\n\n    def get_field_names(self):\n        field_names = []\n        for i in range(1, getattr(self, \"number_of_fields\", 0) + 1):\n            field_name = getattr(self, f\"field_{i}_name\", None)\n            if field_name:\n                field_names.append(field_name)\n        return field_names\n\n    def build_output(self) -> Data:\n        field_names = self.get_field_names()\n        return Data(data={\"output_keys\": field_names})"
              },
              "field_1_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Key 1 Name",
                "dynamic": false,
                "info": "Name of key 1 that you want to output.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "field_1_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "decedent_name"
              },
              "number_of_fields": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Number of Keys",
                "dynamic": false,
                "info": "Number of Keys to be added to the record.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_fields",
                "placeholder": "",
                "range_spec": {
                  "max": 15,
                  "min": 1,
                  "step": 1,
                  "step_type": "int"
                },
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "output"
        },
        "dragging": false,
        "id": "output-qAuJW",
        "measured": {
          "height": 311,
          "width": 320
        },
        "position": {
          "x": -1684.9852226944797,
          "y": 955.068637589264
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Exist-7L86m",
          "node": {
            "base_classes": [
              "Component"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "This defines the keys that will be checked for availability.",
            "display_name": "Exist Key Filter",
            "documentation": "",
            "edited": false,
            "field_order": [
              "key",
              "tag"
            ],
            "frozen": false,
            "icon": "table",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Filtered Data",
                "hidden": false,
                "method": "build_output",
                "name": "output",
                "selected": "Component",
                "tool_mode": true,
                "types": [
                  "Component"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import Output\nfrom langflow.inputs.inputs import MessageTextInput\n\n\nclass ExistComponent(Component):\n    display_name = \"Exist Key Filter\"\n    name = \"Exist\"\n    MAX_FIELDS = 15\n    icon = \"table\"\n    description: str = \"This defines the keys that will be checked for availability.\"\n    inputs = [\n        MessageTextInput(\n            name=\"key\",\n            display_name=\"Key\",\n            input_types=[],\n            info=\"Key.\",\n        ),\n        MessageTextInput(\n            name=\"tag\",\n            advanced=True,\n            display_name=\"Tag\",\n            input_types=[],\n            info=\"Tag.\",\n        ),\n        \n    ]\n    outputs = [\n        Output(\n            display_name=\"Filtered Data\", name=\"output\", method=\"build_output\"\n        )\n    ]\n\n\n    def build_output(self) -> Component:\n        return self\n\n    def process(self, api, forms, get_form_value) -> bool:\n        key:str = self.key\n        tag:str = self.tag\n        value:str|bool|int|None = get_form_value(forms, key,tag)\n        if not value:\n            return False\n        return True\n\n\n"
              },
              "key": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Key",
                "dynamic": false,
                "info": "Key.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "key",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "decedent_name"
              },
              "tag": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tag",
                "dynamic": false,
                "info": "Tag.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tag",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Exist"
        },
        "dragging": false,
        "id": "Exist-7L86m",
        "measured": {
          "height": 249,
          "width": 320
        },
        "position": {
          "x": -2381.037950831012,
          "y": 388.62010886409416
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "date_field_filter-KqnBs",
          "node": {
            "base_classes": [
              "Component"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Returns the date range, along with the corresponding keys.",
            "display_name": "Date Filter",
            "documentation": "",
            "edited": false,
            "field_order": [
              "field_1_name",
              "tag_1",
              "field_2_name",
              "field_3_name",
              "tag_2",
              "field_4_name"
            ],
            "frozen": false,
            "icon": "clock",
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_data",
                "name": "data",
                "selected": "Component",
                "tool_mode": true,
                "types": [
                  "Component"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import List\nfrom datetime import datetime\n\nfrom langflow.custom import Component\nfrom langflow.io import (\n    MessageTextInput,\n    Output,\n)\n\nfrom langflow.docbuilder import CDocBuilderValue\n\n\nclass DateKeyComponent(Component):\n    display_name: str = \"Date Filter\"\n    description: str = \"Returns the date range, along with the corresponding keys.\"\n    name: str = \"date_field_filter\"\n\n    icon = \"clock\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"field_1_name\",\n            display_name=\"Key 1\",\n            input_types=[],\n            info=\"Key1.\",\n        ),\n        MessageTextInput(\n            name=\"tag_1\",\n            display_name=\"Tag 1\",\n            input_types=[],\n            advanced=True,\n            info=\"Tag1.\",\n        ),\n        MessageTextInput(\n            name=\"field_2_name\",\n            display_name=\"From\",\n            placeholder=\"DD/MM/YYYY\",\n            input_types=[],\n            info=\"Value of form for key:1.\",\n        ),\n        MessageTextInput(\n            name=\"field_3_name\",\n            display_name=\"Key 2\",\n            input_types=[],\n            info=\"Key2.\",\n        ),\n        MessageTextInput(\n            name=\"tag_2\",\n            advanced=True,\n            display_name=\"Tag 2\",\n            input_types=[],\n            info=\"Tag2.\",\n        ),\n        MessageTextInput(\n            name=\"field_4_name\",\n            display_name=\"To\",\n            placeholder=\"DD/MM/YYYY\",\n            input_types=[],\n            info=\"Value of form for key:2.\",\n        ),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"data\",\n            method=\"build_data\",\n        ),\n    ]\n\n    def parse_date(self, date_str) -> int:\n        if not date_str:\n            return None\n        try:\n            dt = datetime.strptime(str(date_str), \"%d/%m/%Y\")\n            return float(dt.timestamp()) * 1000\n        except (TypeError, ValueError) as e: \n            msg = f\"Can't parse '{date_str}' as date: {e!s}\"\n            raise ValueError(msg) from e  \n\n    def get_field_names(self) -> List[str | None]:\n        key1:str|None = self.field_1_name\n        from_date_str:str|None = self.field_2_name\n        key2:str|None = self.field_3_name\n        to_date_str:str|None = self.field_4_name\n        tag1:str|None = self.tag_1\n        tag2:str|None = self.tag_2\n        return [key1, tag1, from_date_str, key2, tag2, to_date_str]\n\n    def process(self, api, forms: CDocBuilderValue, get_form_value) -> bool:\n        config_values: List[str|None] = self.get_field_names()\n        key1, tag1, from_date_str, key2, tag2, to_date_str = config_values\n\n        if not key1 and not key2:\n            return False\n\n        input_from_date: int | None = self.parse_date(from_date_str)\n        input_to_date: int | None = self.parse_date(to_date_str)\n        file_to_date: int | None = get_form_value(forms, key2,tag2)\n        file_from_date: int | None = get_form_value(forms, key1,tag1)\n\n        if all([input_to_date, input_from_date,file_from_date, file_to_date]):\n            return (input_from_date < file_from_date) and (file_to_date < input_to_date)\n\n        elif input_from_date and file_from_date:\n            return input_from_date < file_from_date\n\n        elif input_to_date and file_to_date:\n            return file_to_date < input_to_date\n        else:\n            return False\n\n    def build_data(self) -> Component:\n        return self\n"
              },
              "field_1_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Key 1",
                "dynamic": false,
                "info": "Key1.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "field_1_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "signature_date"
              },
              "field_2_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "From",
                "dynamic": false,
                "info": "Value of form for key:1.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "field_2_name",
                "placeholder": "DD/MM/YYYY",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "01/01/2024"
              },
              "field_3_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Key 2",
                "dynamic": false,
                "info": "Key2.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "field_3_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "representative_signature_date"
              },
              "field_4_name": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "To",
                "dynamic": false,
                "info": "Value of form for key:2.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "field_4_name",
                "placeholder": "DD/MM/YYYY",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tag_1": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tag 1",
                "dynamic": false,
                "info": "Tag1.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tag_1",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tag_2": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tag 2",
                "dynamic": false,
                "info": "Tag2.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tag_2",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "date_field_filter"
        },
        "dragging": false,
        "id": "date_field_filter-KqnBs",
        "measured": {
          "height": 496,
          "width": 320
        },
        "position": {
          "x": -2410.709906010966,
          "y": 770.9734443501185
        },
        "selected": true,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "check_box-WPzJ3",
          "node": {
            "base_classes": [
              "Component"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "This determines which checkboxes from the list have been checked.",
            "display_name": "Checkbox Filter",
            "documentation": "",
            "edited": false,
            "field_order": [
              "key",
              "tag",
              "flag"
            ],
            "frozen": false,
            "legacy": false,
            "lf_version": "1.3.4",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Filtered Data",
                "hidden": false,
                "method": "build_output",
                "name": "output",
                "selected": "Component",
                "tool_mode": true,
                "types": [
                  "Component"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import Output\nfrom langflow.inputs.inputs import MessageTextInput, BoolInput\n\nclass CheckBoxComponent(Component):\n    display_name = \"Checkbox Filter\"\n    name = \"check_box\"\n    description: str = \"This determines which checkboxes from the list have been checked.\"\n    inputs = [\n        MessageTextInput(\n            name=\"key\",\n            display_name=\"Key\",\n            input_types=[],\n            info=\"Key.\",\n        ),\n        MessageTextInput(\n            name=\"tag\",\n            display_name=\"Tag\",\n            advanced=True,\n            input_types=[],\n            info=\"Tag.\",\n        ),\n        BoolInput(\n            name=\"flag\",\n            display_name=\"Checked\",\n            info=\"Is the checkbox checked?\",\n            input_types=[],\n            value=True,\n        ),\n        \n    ]\n    outputs = [\n        Output(\n            display_name=\"Filtered Data\", name=\"output\", method=\"build_output\"\n        )\n    ]\n\n    def build_output(self) -> Component:\n        return self\n\n    def process(self, api, forms, get_form_value) -> bool:\n        key:str = self.key\n        flag:bool = self.flag\n        value:bool|None = get_form_value(forms, key)\n\n        return value == flag\n"
              },
              "flag": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Checked",
                "dynamic": false,
                "info": "Is the checkbox checked?",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "flag",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "key": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Key",
                "dynamic": false,
                "info": "Key.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "key",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "individual_tax_returns"
              },
              "tag": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Tag",
                "dynamic": false,
                "info": "Tag.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tag",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "check_box"
        },
        "dragging": false,
        "id": "check_box-WPzJ3",
        "measured": {
          "height": 287,
          "width": 320
        },
        "position": {
          "x": -1956.1280125531976,
          "y": 456.87669988116096
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 1357.9810729736341,
      "y": 44.557637102105105,
      "zoom": 0.5169585577033816
    }
  },
  "description": "Powerful Prompts, Perfectly Positioned.",
  "endpoint_name": null,
  "folder_id": "3ff9e0f6-f1b6-4c6d-8b6a-8fb1b864491a",
  "fs_path": null,
  "gradient": null,
  "icon": null,
  "icon_bg_color": null,
  "id": "81688d53-950f-48c0-8d36-8d32d5adc874",
  "is_component": false,
  "locked": false,
  "name": "form-filter",
  "tags": [],
  "updated_at": "2025-04-29T22:04:29+00:00",
  "user_id": "342acb18-c0ac-4d3e-8239-e941b4676372",
  "webhook": false
}