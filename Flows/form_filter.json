{
  "id": "213167f4-7f90-455b-bebf-9b6d8adbbede",
  "data": {
    "nodes": [
      {
        "id": "FormFilter-77ocL",
        "type": "genericNode",
        "position": {
          "x": 686.7341648304248,
          "y": -174.84491024252867
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "fields": {
                "type": "str",
                "required": false,
                "placeholder": "",
                "list": true,
                "show": true,
                "multiline": false,
                "fileTypes": [],
                "file_path": "",
                "name": "fields",
                "advanced": false,
                "input_types": [
                  "Component"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "output_keys": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "output_keys",
                "display_name": "Output keys",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "List of fields to extract from the files.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "paths": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "paths",
                "value": "",
                "display_name": "File Paths",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "List of file paths to process.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any, Dict, List\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.docbuilder import docbuilder\r\nfrom langflow.inputs import Input\r\nfrom langflow.inputs.inputs import (\r\n    DataInput,\r\n)\r\nfrom langflow.io import Output\r\nfrom langflow.schema import Data\r\n\r\nclass File:\r\n    def __init__(self):\r\n        self.builder = None\r\n        self.context = None\r\n\r\n        # js objects\r\n        self.globalObj = None\r\n        self.api = None\r\n        self.document = None\r\n        self.forms = None\r\n\r\n    def open(file_path, params=\"\"):\r\n        self.builder = docbuilder.CDocBuilder()\r\n\r\n        res = self.builder.OpenFile(file_path, params)\r\n        if (res != 0):\r\n            return False\r\n\r\n        self.context = self.builder.GetContext()\r\n        self.globalObj = self.context.GetGlobal()\r\n        self.Api = self.globalObj[\"Api\"]\r\n        self.document = self.Api.GetDocument()\r\n        return True\r\n\r\n    def close():\r\n        if (self.context is None):\r\n            return\r\n        del self.forms\r\n        del self.document\r\n        del self.api\r\n        del self.globalObj\r\n        del self.context\r\n        self.builder.CloseFile()\r\n\r\n    def getAllForms(self):\r\n        if (self.context is None):\r\n            return []\r\n        if (self.forms is None):\r\n            self.forms = self.document.GetAllForms()\r\n        return self.forms\r\n\r\n    def getFormsByTag(self, tag):\r\n        if (self.context is None):\r\n            return []\r\n        return self.document.GetFormsByTag(tag);\r\n\r\n    def getFormsByKey(self, key):\r\n        if (self.context is None):\r\n            return []\r\n        result = []\r\n        for i in range(self.forms.GetLength()):\r\n            form = self.forms.Get(i)\r\n            if (form.GetFormKey().ToString() == key):\r\n                result.append(form)\r\n        return result\r\n\r\n    def getFormsByKeyTag(self, key, tag=None):\r\n        if (self.context is None):\r\n            return []\r\n        key_tag_forms = self.forms\r\n        if (tag is not None and tag != \"\"):\r\n            key_tag_forms = self.getFormsByTag(tag)\r\n        for i in range(key_tag_forms.GetLength()):\r\n            form = key_tag_forms.Get(i)\r\n            if (form.GetFormKey().ToString() == key):\r\n                result.append(form)\r\n        return result\r\n\r\n    def getFormValue(self, form):\r\n        form_type = form.GetFormType().ToString()\r\n        if form_type == \"textForm\":\r\n            return form.GetText().ToString()\r\n        elif form_type == \"dateForm\":\r\n            return form.GetTime().ToDouble()\r\n        elif form_type == \"checkBoxForm\":\r\n            return form.IsChecked().ToBool()\r\n        elif form_type == \"radioButtonForm\":\r\n            return form.IsChecked().ToBool()\r\n        elif form_type == \"comboBoxForm\":\r\n            return form.GetText().ToString()\r\n        elif form_type == \"dropDownForm\":\r\n            return form.GetText().ToString()\r\n        return None\r\n\r\n    def getFormValueByKey(self, key, tag=None):\r\n        forms_check = self.getFormsByKeyTag(key, tag)\r\n        count = forms_check.GetLength()\r\n        if (0 == count):\r\n            return None\r\n        if (1 == count):\r\n            return self.getFormValue(forms_check.Get(0))\r\n\r\n        choice = \"\"\r\n        for i in range(count):\r\n            form = forms_check.Get(i)\r\n            form_type = form.GetFormType().ToString()\r\n            if (\"radioButtonForm\" != form_type):\r\n                return self.getFormValue(form)\r\n            if (form.IsChecked()):\r\n                choice = form.GetChoiceName()\r\n        return choice\r\n\r\n    def getRadioButtonValue(self, key):\r\n        for i in range(self.forms.GetLength()):\r\n            form = self.forms.Get(i)\r\n            if (form.GetFormKey().ToString() == key):\r\n                form_type = form.GetFormType().ToString()\r\n                if (form_type == \"checkBoxForm\" or form_type == \"radioButtonForm\"):\r\n                    if form.IsChecked().ToBool():\r\n                        return form.GetChoiceName().ToString()\r\n        return None\r\n\r\n    def __del__(self):\r\n        self.close()\r\n\r\n\r\nclass FormFilterComponent(Component):\r\n    display_name: str = \"Form Filter\"\r\n    description: str = \"Filters the specified forms based on the specified criteria.\"\r\n    name: str = \"FormFilter\"\r\n    icon = \"filter\"\r\n    inputs = [\r\n        DataInput(\r\n            name=\"paths\",\r\n            display_name=\"File Paths\",\r\n            info=\"List of file paths to process.\",\r\n            is_list=True,\r\n            required=True,\r\n        ),\r\n        Input(\r\n            name=\"fields\",\r\n            input_types=[\"Component\"],\r\n            component=Component,\r\n            is_list=True,\r\n        ),\r\n        DataInput(\r\n            name=\"output_keys\",\r\n            display_name=\"Output keys\",\r\n            info=\"List of fields to extract from the files.\",\r\n            input_types=[\"Data\"],\r\n            value=None,\r\n        ),        \r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data_list\", method=\"build_data\"),\r\n        Output(display_name=\"Paths\", name=\"paths_list\", method=\"build_paths\"),\r\n    ]\r\n\r\n    def build_main(self) -> List:\r\n        file_paths: list[str] = self.paths\r\n        filters: list[Component] = self.fields\r\n        output_keys = self.output_keys.data[\"output_keys\"] if self.output_keys else None\r\n        result = []\r\n\r\n        for file_path in file_paths:\r\n            if isinstance(file_path, Data):\r\n                file_path = file_path.text\r\n            file = File()\r\n            if not file.open(file_path):\r\n                continue\r\n            \r\n            passed = True\r\n            for filter_component in filters:\r\n                if hasattr(filter_component, \"process\"):\r\n                    if not filter_component.process(file):\r\n                        passed = False\r\n                        break\r\n            if passed:\r\n                record = {\"file_path\": file_path}\r\n                if output_keys:\r\n                    for key in output_keys:\r\n                        record[key] = file.getFormValueByKey(key)\r\n                result.append(record)\r\n            file.close()\r\n        return result\r\n\r\n    def build_data(self) -> Data:\r\n        processed_data = self.build_main()\r\n        return Data(data={\"items\": processed_data})\r\n\r\n    def build_paths(self) -> list[Data]:\r\n        processed_data = self.build_main()\r\n        file_paths = [record[\"file_path\"] for record in processed_data]\r\n        return file_paths\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Filters the specified forms based on the specified criteria.",
            "icon": "filter",
            "base_classes": [
              "Data"
            ],
            "display_name": "Form Filter",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data_list",
                "display_name": "Data",
                "method": "build_data",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              },
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "paths_list",
                "display_name": "Paths",
                "method": "build_paths",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "paths",
              "fields",
              "output_keys"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "FormFilter",
          "id": "FormFilter-77ocL"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 393
        },
        "dragging": false
      },
      {
        "id": "DirectoryPath-kLK4g",
        "type": "genericNode",
        "position": {
          "x": 24.37027709952622,
          "y": -440.87628999728224
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.data.utils import (\r\n    TEXT_FILE_TYPES,\r\n    retrieve_file_paths,\r\n)\r\nfrom langflow.custom import Component\r\nfrom langflow.io import BoolInput, IntInput, MessageTextInput, MultiselectInput\r\nfrom langflow.schema import Data\r\nfrom langflow.template import Output\r\n\r\n\r\nclass DirectoryPathComponent(Component):\r\n    display_name = \"Directory Paths\"\r\n    description = \"Retrieve paths from a folder.\"\r\n    icon = \"folder\"\r\n    name = \"DirectoryPath\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"path\",\r\n            display_name=\"Path\",\r\n            info=\"Path to the directory to load files from. Defaults to current directory ('.')\",\r\n            value=\".\",\r\n            tool_mode=True,\r\n        ),\r\n        MultiselectInput(\r\n            name=\"types\",\r\n            display_name=\"File Types\",\r\n            info=\"File types to load. Select one or more types or leave empty to load all supported types.\",\r\n            options=TEXT_FILE_TYPES,\r\n            value=[],\r\n        ),\r\n        IntInput(\r\n            name=\"depth\",\r\n            display_name=\"Depth\",\r\n            advanced=True,\r\n            info=\"Depth to search for files.\",\r\n            value=0,\r\n        ),\r\n        IntInput(\r\n            name=\"max_concurrency\",\r\n            display_name=\"Max Concurrency\",\r\n            advanced=True,\r\n            info=\"Maximum concurrency for loading files.\",\r\n            value=2,\r\n        ),\r\n        BoolInput(\r\n            name=\"load_hidden\",\r\n            display_name=\"Load Hidden\",\r\n            advanced=True,\r\n            info=\"If true, hidden files will be loaded.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"recursive\",\r\n            display_name=\"Recursive\",\r\n            advanced=True,\r\n            info=\"If true, the search will be recursive.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"silent_errors\",\r\n            display_name=\"Silent Errors\",\r\n            advanced=True,\r\n            info=\"If true, errors will not raise an exception.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"use_multithreading\",\r\n            display_name=\"Use Multithreading\",\r\n            advanced=True,\r\n            info=\"If true, multithreading will be used.\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Data\", name=\"data\", method=\"load_directory\"),\r\n    ]\r\n\r\n    def load_directory(self) -> list[Data]:\r\n        path = self.path\r\n        types = self.types\r\n        depth = self.depth\r\n        load_hidden = self.load_hidden\r\n        recursive = self.recursive\r\n\r\n        resolved_path = self.resolve_path(path)\r\n\r\n        if not types:\r\n            types = TEXT_FILE_TYPES\r\n\r\n        invalid_types = [t for t in types if t not in TEXT_FILE_TYPES]\r\n        if invalid_types:\r\n            msg = f\"Invalid file types specified: {invalid_types}. Valid types are: {TEXT_FILE_TYPES}\"\r\n            raise ValueError(msg)\r\n\r\n        valid_types = types\r\n\r\n        file_paths = retrieve_file_paths(\r\n            resolved_path,\r\n            load_hidden=load_hidden,\r\n            recursive=recursive,\r\n            depth=depth,\r\n            types=valid_types,\r\n        )\r\n\r\n        return file_paths\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "depth": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "depth",
                "value": 0,
                "display_name": "Depth",
                "advanced": true,
                "dynamic": false,
                "info": "Depth to search for files.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "load_hidden": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "load_hidden",
                "value": false,
                "display_name": "Load Hidden",
                "advanced": true,
                "dynamic": false,
                "info": "If true, hidden files will be loaded.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "max_concurrency": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_concurrency",
                "value": 2,
                "display_name": "Max Concurrency",
                "advanced": true,
                "dynamic": false,
                "info": "Maximum concurrency for loading files.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "path": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "path",
                "value": "D:\\GIT2\\K0R0L\\langflow\\Files",
                "display_name": "Path",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Path to the directory to load files from. Defaults to current directory ('.')",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "recursive": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "recursive",
                "value": false,
                "display_name": "Recursive",
                "advanced": true,
                "dynamic": false,
                "info": "If true, the search will be recursive.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "silent_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "silent_errors",
                "value": false,
                "display_name": "Silent Errors",
                "advanced": true,
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "types": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "combobox": false,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "types",
                "value": [
                  "pdf"
                ],
                "display_name": "File Types",
                "advanced": false,
                "dynamic": false,
                "info": "File types to load. Select one or more types or leave empty to load all supported types.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultiselectInput"
              },
              "use_multithreading": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "use_multithreading",
                "value": false,
                "display_name": "Use Multithreading",
                "advanced": true,
                "dynamic": false,
                "info": "If true, multithreading will be used.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              }
            },
            "description": "Retrieve paths from a folder.",
            "icon": "folder",
            "base_classes": [
              "Data"
            ],
            "display_name": "Directory Paths",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "data",
                "display_name": "Data",
                "method": "load_directory",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "path",
              "types",
              "depth",
              "max_concurrency",
              "load_hidden",
              "recursive",
              "silent_errors",
              "use_multithreading"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "DirectoryPath",
          "id": "DirectoryPath-kLK4g"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 311
        },
        "dragging": false
      },
      {
        "id": "output-NshNm",
        "type": "genericNode",
        "position": {
          "x": 137.62493743857726,
          "y": 323.02561259170966
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.io import Output, DropdownInput\r\nfrom langflow.schema import Data\r\nfrom langflow.inputs.inputs import IntInput, MessageTextInput\r\nfrom langflow.field_typing.range_spec import RangeSpec\r\nfrom langflow.schema.dotdict import dotdict\r\n\r\n\r\nclass OutputKeysComponent(Component):\r\n    display_name = \"Output Keys\"\r\n    name = \"output\"\r\n    MAX_FIELDS = 15\r\n    description: str = \"Specifies the keys to be displayed.\"\r\n    icon = \"table\"\r\n    inputs = [\r\n        IntInput(\r\n            name=\"number_of_fields\",\r\n            display_name=\"Number of Keys\",\r\n            info=\"Number of Keys to be added to the record.\",\r\n            real_time_refresh=True,\r\n            value=0,\r\n            range_spec=RangeSpec(\r\n                min=1, max=MAX_FIELDS, step=1, step_type=\"int\"\r\n            ),\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"Filtered Data\", name=\"output\", method=\"build_output\"\r\n        )\r\n    ]\r\n\r\n    def update_build_config(\r\n        self, build_config: dotdict, field_value, field_name=None\r\n    ):\r\n        if field_name == \"number_of_fields\":\r\n            default_keys = {\"code\", \"_type\", \"number_of_fields\", \"data\"}\r\n\r\n            try:\r\n                field_value_int = int(field_value)\r\n            except ValueError:\r\n                return build_config\r\n            if field_value_int > self.MAX_FIELDS:\r\n                build_config[\"number_of_fields\"][\"value\"] = self.MAX_FIELDS\r\n                raise ValueError(\r\n                    f\"Number of fields cannot exceed {self.MAX_FIELDS}.\"\r\n                )\r\n\r\n            existing_fields = {}\r\n            for key in list(build_config.keys()):\r\n                if key not in default_keys:\r\n                    existing_fields[key] = build_config.pop(key)\r\n\r\n            for i in range(1, field_value_int + 1):\r\n                key = f\"field_{i}_name\"\r\n                if key in existing_fields:\r\n                    field = existing_fields[key]\r\n                    build_config[key] = field\r\n                else:\r\n                    field = MessageTextInput(\r\n                        display_name=f\"Key {i} Name\",\r\n                        name=key,\r\n                        info=f\"Name of key {i} that you want to output.\",\r\n                    )\r\n                    build_config[field.name] = field.to_dict()\r\n            build_config[\"number_of_fields\"][\"value\"] = field_value_int\r\n        return build_config\r\n\r\n    def get_field_names(self):\r\n        field_names = []\r\n        for i in range(1, getattr(self, \"number_of_fields\", 0) + 1):\r\n            field_name = getattr(self, f\"field_{i}_name\", None)\r\n            if field_name:\r\n                field_names.append(field_name)\r\n        return field_names\r\n\r\n    def build_output(self) -> Data:\r\n        field_names = self.get_field_names()\r\n        return Data(data={\"output_keys\": field_names})",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "number_of_fields": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "int",
                  "min": 1,
                  "max": 15,
                  "step": 1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "number_of_fields",
                "value": 1,
                "display_name": "Number of Keys",
                "advanced": false,
                "dynamic": false,
                "info": "Number of Keys to be added to the record.",
                "real_time_refresh": true,
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "field_1_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "field_1_name",
                "value": "your_name",
                "display_name": "Key 1 Name",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of key 1 that you want to output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Specifies the keys to be displayed.",
            "icon": "table",
            "base_classes": [
              "Data"
            ],
            "display_name": "Output Keys",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Data"
                ],
                "selected": "Data",
                "name": "output",
                "hidden": null,
                "display_name": "Filtered Data",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "number_of_fields"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "output",
          "id": "output-NshNm"
        },
        "selected": true,
        "measured": {
          "width": 320,
          "height": 311
        },
        "dragging": false
      },
      {
        "id": "check_box-NzZsM",
        "type": "genericNode",
        "position": {
          "x": -101.44111316240844,
          "y": -45.79750550872585
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "checked": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "checked",
                "value": true,
                "display_name": "Checked",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "Is the checkbox checked?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.io import Output\r\nfrom langflow.inputs.inputs import MessageTextInput, BoolInput\r\nfrom regex import T\r\n\r\nclass CheckBoxComponent(Component):\r\n    display_name = \"Checkbox Filter\"\r\n    name = \"check_box\"\r\n    description: str = \"This determines which checkboxes from the list have been checked.\"\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"key\",\r\n            display_name=\"Key\",\r\n            input_types=[],\r\n            info=\"Key.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"tag\",\r\n            display_name=\"Tag\",\r\n            input_types=[],\r\n            info=\"Tag.\",\r\n            advanced=True\r\n        ),\r\n        BoolInput(\r\n            name=\"checked\",\r\n            display_name=\"Checked\",\r\n            info=\"Is the checkbox checked?\",\r\n            input_types=[],\r\n            value=True,\r\n        ),\r\n        \r\n    ]\r\n    outputs = [\r\n        Output(\r\n            display_name=\"Filtered Data\", name=\"output\", method=\"build_output\"\r\n        )\r\n    ]\r\n\r\n    def build_output(self) -> Component:\r\n        return self\r\n\r\n    def process(self, file) -> bool:\r\n        if self.checked == file.getFormValueByKey(self.key, self.tag):\r\n            return True\r\n        return False\r\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "key": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "key",
                "value": "joint_return_separation_checkbox",
                "display_name": "Key",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "Key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "tag": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tag",
                "value": "",
                "display_name": "Tag",
                "advanced": true,
                "input_types": [],
                "dynamic": false,
                "info": "Tag.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "This determines which checkboxes from the list have been checked.",
            "base_classes": [
              "Component"
            ],
            "display_name": "Checkbox Filter",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Component"
                ],
                "selected": "Component",
                "name": "output",
                "display_name": "Filtered Data",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "key",
              "tag",
              "checked"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "check_box",
          "id": "check_box-NzZsM"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 291
        },
        "dragging": false
      },
      {
        "id": "DataToText-cBji5",
        "type": "genericNode",
        "position": {
          "x": 1233.3663656795752,
          "y": 166.60757895513618
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "dict_list": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "trace_as_input": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "dict_list",
                "value": "",
                "display_name": "Data",
                "advanced": false,
                "input_types": [
                  "Data"
                ],
                "dynamic": false,
                "info": "List of dictionaries to process.",
                "title_case": false,
                "type": "other",
                "_input_type": "DataInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.custom import Component\r\nfrom langflow.io import Output, DataInput\r\nfrom langflow.schema import Data\r\n\r\nclass DataToTextComponent(Component):\r\n    display_name = \"Data To Text\"\r\n    name = \"DataToText\"\r\n    icon = \"braces\"\r\n    description: str = \"Converts data into text.\"\r\n    inputs = [\r\n        DataInput(\r\n            name=\"dict_list\",\r\n            display_name=\"Data\",\r\n            info=\"List of dictionaries to process.\",\r\n            input_types=[\"Data\"],\r\n            required=True,\r\n        ),\r\n    ]\r\n    outputs = [\r\n        Output(display_name=\"Message\", name=\"text\", method=\"build_output\"),\r\n    ]\r\n\r\n    def get_text_from_processed_data(self, processed_data: list[str]) -> str:\r\n        \"\"\"Convert processed_data into a readable text format.\"\"\"\r\n        text_lines = []\r\n        for person in processed_data:\r\n            for key, record in person.items():\r\n                text_lines.append(f\"  {key}: {record}\")\r\n                text_lines.append(\"\")\r\n    \r\n        return \"\\n\".join(text_lines)\r\n         \r\n    def build_output(self) -> Message:\r\n        #msg = f\"{self.dict_list}\"\r\n        #raise ValueError(msg)\r\n        fields = self.dict_list.data[\"items\"]\r\n        text = f\"{self.get_text_from_processed_data(fields)}\"\r\n        message = Message(\r\n            text=text,\r\n        )\r\n        return message",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              }
            },
            "description": "Converts data into text.",
            "icon": "braces",
            "base_classes": [
              "Message"
            ],
            "display_name": "Data To Text",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "text",
                "hidden": null,
                "display_name": "Message",
                "method": "build_output",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "dict_list"
            ],
            "beta": false,
            "legacy": false,
            "edited": true,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": true,
          "type": "DataToText",
          "id": "DataToText-cBji5"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 191
        },
        "dragging": false
      },
      {
        "id": "ChatOutput-rkraP",
        "type": "genericNode",
        "position": {
          "x": 1679.9867169506126,
          "y": 274.6261023180959
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "minimized": true,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput",
          "id": "ChatOutput-rkraP"
        },
        "selected": false,
        "measured": {
          "width": 192,
          "height": 66
        },
        "dragging": false
      }
    ],
    "edges": [
      {
        "source": "DirectoryPath-kLK4g",
        "sourceHandle": "{œdataTypeœ:œDirectoryPathœ,œidœ:œDirectoryPath-kLK4gœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "FormFilter-77ocL",
        "targetHandle": "{œfieldNameœ:œpathsœ,œidœ:œFormFilter-77ocLœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "paths",
            "id": "FormFilter-77ocL",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "DirectoryPath",
            "id": "DirectoryPath-kLK4g",
            "name": "data",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__DirectoryPath-kLK4g{œdataTypeœ:œDirectoryPathœ,œidœ:œDirectoryPath-kLK4gœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-FormFilter-77ocL{œfieldNameœ:œpathsœ,œidœ:œFormFilter-77ocLœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "output-NshNm",
        "sourceHandle": "{œdataTypeœ:œoutputœ,œidœ:œoutput-NshNmœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}",
        "target": "FormFilter-77ocL",
        "targetHandle": "{œfieldNameœ:œoutput_keysœ,œidœ:œFormFilter-77ocLœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "output_keys",
            "id": "FormFilter-77ocL",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "output",
            "id": "output-NshNm",
            "name": "output",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__output-NshNm{œdataTypeœ:œoutputœ,œidœ:œoutput-NshNmœ,œnameœ:œoutputœ,œoutput_typesœ:[œDataœ]}-FormFilter-77ocL{œfieldNameœ:œoutput_keysœ,œidœ:œFormFilter-77ocLœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "check_box-NzZsM",
        "sourceHandle": "{œdataTypeœ:œcheck_boxœ,œidœ:œcheck_box-NzZsMœ,œnameœ:œoutputœ,œoutput_typesœ:[œComponentœ]}",
        "target": "FormFilter-77ocL",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-77ocLœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "fields",
            "id": "FormFilter-77ocL",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "check_box",
            "id": "check_box-NzZsM",
            "name": "output",
            "output_types": [
              "Component"
            ]
          }
        },
        "id": "xy-edge__check_box-NzZsM{œdataTypeœ:œcheck_boxœ,œidœ:œcheck_box-NzZsMœ,œnameœ:œoutputœ,œoutput_typesœ:[œComponentœ]}-FormFilter-77ocL{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-77ocLœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "className": ""
      },
      {
        "source": "FormFilter-77ocL",
        "sourceHandle": "{œdataTypeœ:œFormFilterœ,œidœ:œFormFilter-77ocLœ,œnameœ:œdata_listœ,œoutput_typesœ:[œDataœ]}",
        "target": "DataToText-cBji5",
        "targetHandle": "{œfieldNameœ:œdict_listœ,œidœ:œDataToText-cBji5œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "data": {
          "targetHandle": {
            "fieldName": "dict_list",
            "id": "DataToText-cBji5",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          },
          "sourceHandle": {
            "dataType": "FormFilter",
            "id": "FormFilter-77ocL",
            "name": "data_list",
            "output_types": [
              "Data"
            ]
          }
        },
        "id": "xy-edge__FormFilter-77ocL{œdataTypeœ:œFormFilterœ,œidœ:œFormFilter-77ocLœ,œnameœ:œdata_listœ,œoutput_typesœ:[œDataœ]}-DataToText-cBji5{œfieldNameœ:œdict_listœ,œidœ:œDataToText-cBji5œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "className": ""
      },
      {
        "source": "DataToText-cBji5",
        "sourceHandle": "{œdataTypeœ:œDataToTextœ,œidœ:œDataToText-cBji5œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-rkraP",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-rkraPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-rkraP",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          },
          "sourceHandle": {
            "dataType": "DataToText",
            "id": "DataToText-cBji5",
            "name": "text",
            "output_types": [
              "Message"
            ]
          }
        },
        "id": "xy-edge__DataToText-cBji5{œdataTypeœ:œDataToTextœ,œidœ:œDataToText-cBji5œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-rkraP{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-rkraPœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "viewport": {
      "x": 145.00603083536146,
      "y": 370.61423683380985,
      "zoom": 0.6945958506695277
    }
  },
  "description": "Powerful Prompts, Perfectly Positioned.",
  "name": "flow_filter",
  "last_tested_version": "1.3.2",
  "endpoint_name": null,
  "is_component": false
}