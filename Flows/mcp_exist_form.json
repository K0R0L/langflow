{
  "access_type": "PRIVATE",
  "action_description": "args: input_value:str\ndescription of tool: Use this tool to search and filter forms in a specified directory. The input should be a structured string containing:\n1) Path to the directory with forms\n2) Filters to apply (supported types: \"exist\", \"checkbox\", \"date_field_filter\", \"text\")\n3) Output fields to display\n\nFormat example:\npath: /path/to/directory; filters: [ {\"type\": \"exist\", \"key\": \"field_name\", \"tag\":\"\"}, {\"type\": \"check_box\", \"key\": \"field_name\", \"tag\":\"\", \"value\":\"True\"}, {\"type\": \"date_field_filter\", \"key_1\": \"date_field\", \"tag_1\": \"\", \"field_1\":\"24/07/2024\", \"key_2\": \"end_date\", \"tag_2\": \"\", \"field_2\":\"24/08/2024\"} ]; output: [\"field1\", \"field2\"]\n\nEach filter has specific parameters:\n- exist: checks if a field exists (parameters: key, tag)\n- check_box: checks if a checkbox is selected (parameters: key, tag, value)\n- date_field_filter: filters by date range (parameters: key_1, tag_1, field_1, key_2, tag_2, field_2)\n- text: searches for specific text (parameters: key, tag, value)",
  "action_name": "mcp_exist_form",
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DirectoryPath",
            "id": "DirectoryPath-0teKE",
            "name": "data",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "paths",
            "id": "FormFilter-l4kl0",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__DirectoryPath-0teKE{œdataTypeœ:œDirectoryPathœ,œidœ:œDirectoryPath-0teKEœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-FormFilter-l4kl0{œfieldNameœ:œpathsœ,œidœ:œFormFilter-l4kl0œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "DirectoryPath-0teKE",
        "sourceHandle": "{œdataTypeœ:œDirectoryPathœ,œidœ:œDirectoryPath-0teKEœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}",
        "target": "FormFilter-l4kl0",
        "targetHandle": "{œfieldNameœ:œpathsœ,œidœ:œFormFilter-l4kl0œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "FormFilter",
            "id": "FormFilter-l4kl0",
            "name": "data_list",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "dict_list",
            "id": "DataToText-BI4S9",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__FormFilter-l4kl0{œdataTypeœ:œFormFilterœ,œidœ:œFormFilter-l4kl0œ,œnameœ:œdata_listœ,œoutput_typesœ:[œDataœ]}-DataToText-BI4S9{œfieldNameœ:œdict_listœ,œidœ:œDataToText-BI4S9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "FormFilter-l4kl0",
        "sourceHandle": "{œdataTypeœ:œFormFilterœ,œidœ:œFormFilter-l4kl0œ,œnameœ:œdata_listœ,œoutput_typesœ:[œDataœ]}",
        "target": "DataToText-BI4S9",
        "targetHandle": "{œfieldNameœ:œdict_listœ,œidœ:œDataToText-BI4S9œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DataToText",
            "id": "DataToText-BI4S9",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-Ru7U9",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__DataToText-BI4S9{œdataTypeœ:œDataToTextœ,œidœ:œDataToText-BI4S9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-Ru7U9{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Ru7U9œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "DataToText-BI4S9",
        "sourceHandle": "{œdataTypeœ:œDataToTextœ,œidœ:œDataToText-BI4S9œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "ChatOutput-Ru7U9",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-Ru7U9œ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParsePathKey",
            "id": "CustomComponent-cjOAX",
            "name": "directory",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "path",
            "id": "DirectoryPath-0teKE",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__CustomComponent-cjOAX{œdataTypeœ:œParsePathKeyœ,œidœ:œCustomComponent-cjOAXœ,œnameœ:œdirectoryœ,œoutput_typesœ:[œMessageœ]}-DirectoryPath-0teKE{œfieldNameœ:œpathœ,œidœ:œDirectoryPath-0teKEœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CustomComponent-cjOAX",
        "sourceHandle": "{œdataTypeœ:œParsePathKeyœ,œidœ:œCustomComponent-cjOAXœ,œnameœ:œdirectoryœ,œoutput_typesœ:[œMessageœ]}",
        "target": "DirectoryPath-0teKE",
        "targetHandle": "{œfieldNameœ:œpathœ,œidœ:œDirectoryPath-0teKEœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParsePathKey",
            "id": "CustomComponent-cjOAX",
            "name": "output_key",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "output_keys",
            "id": "FormFilter-l4kl0",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomComponent-cjOAX{œdataTypeœ:œParsePathKeyœ,œidœ:œCustomComponent-cjOAXœ,œnameœ:œoutput_keyœ,œoutput_typesœ:[œDataœ]}-FormFilter-l4kl0{œfieldNameœ:œoutput_keysœ,œidœ:œFormFilter-l4kl0œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomComponent-cjOAX",
        "sourceHandle": "{œdataTypeœ:œParsePathKeyœ,œidœ:œCustomComponent-cjOAXœ,œnameœ:œoutput_keyœ,œoutput_typesœ:[œDataœ]}",
        "target": "FormFilter-l4kl0",
        "targetHandle": "{œfieldNameœ:œoutput_keysœ,œidœ:œFormFilter-l4kl0œ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ParsePathKey",
            "id": "CustomComponent-cjOAX",
            "name": "key",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "data_input",
            "id": "CustomComponent-Rurny",
            "inputTypes": [
              "Data"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomComponent-cjOAX{œdataTypeœ:œParsePathKeyœ,œidœ:œCustomComponent-cjOAXœ,œnameœ:œkeyœ,œoutput_typesœ:[œDataœ]}-CustomComponent-Rurny{œfieldNameœ:œdata_inputœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomComponent-cjOAX",
        "sourceHandle": "{œdataTypeœ:œParsePathKeyœ,œidœ:œCustomComponent-cjOAXœ,œnameœ:œkeyœ,œoutput_typesœ:[œDataœ]}",
        "target": "CustomComponent-Rurny",
        "targetHandle": "{œfieldNameœ:œdata_inputœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ToolsExecutor",
            "id": "CustomComponent-Rurny",
            "name": "exist_output",
            "output_types": [
              "Component"
            ]
          },
          "targetHandle": {
            "fieldName": "fields",
            "id": "FormFilter-l4kl0",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__CustomComponent-Rurny{œdataTypeœ:œToolsExecutorœ,œidœ:œCustomComponent-Rurnyœ,œnameœ:œexist_outputœ,œoutput_typesœ:[œComponentœ]}-FormFilter-l4kl0{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-l4kl0œ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "CustomComponent-Rurny",
        "sourceHandle": "{œdataTypeœ:œToolsExecutorœ,œidœ:œCustomComponent-Rurnyœ,œnameœ:œexist_outputœ,œoutput_typesœ:[œComponentœ]}",
        "target": "FormFilter-l4kl0",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œFormFilter-l4kl0œ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "exist",
            "id": "Exist-PUM8R",
            "name": "result",
            "output_types": [
              "Component"
            ]
          },
          "targetHandle": {
            "fieldName": "fields",
            "id": "CustomComponent-Rurny",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__Exist-PUM8R{œdataTypeœ:œexistœ,œidœ:œExist-PUM8Rœ,œnameœ:œresultœ,œoutput_typesœ:[œComponentœ]}-CustomComponent-Rurny{œfieldNameœ:œfieldsœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Exist-PUM8R",
        "sourceHandle": "{œdataTypeœ:œexistœ,œidœ:œExist-PUM8Rœ,œnameœ:œresultœ,œoutput_typesœ:[œComponentœ]}",
        "target": "CustomComponent-Rurny",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "check_box",
            "id": "check_box-rO2zv",
            "name": "factory",
            "output_types": [
              "Component"
            ]
          },
          "targetHandle": {
            "fieldName": "fields",
            "id": "CustomComponent-Rurny",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__check_box-rO2zv{œdataTypeœ:œcheck_boxœ,œidœ:œcheck_box-rO2zvœ,œnameœ:œfactoryœ,œoutput_typesœ:[œComponentœ]}-CustomComponent-Rurny{œfieldNameœ:œfieldsœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "check_box-rO2zv",
        "sourceHandle": "{œdataTypeœ:œcheck_boxœ,œidœ:œcheck_box-rO2zvœ,œnameœ:œfactoryœ,œoutput_typesœ:[œComponentœ]}",
        "target": "CustomComponent-Rurny",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "date_field_filter",
            "id": "date_field_filter-MZjp2",
            "name": "data",
            "output_types": [
              "Component"
            ]
          },
          "targetHandle": {
            "fieldName": "fields",
            "id": "CustomComponent-Rurny",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__date_field_filter-MZjp2{œdataTypeœ:œdate_field_filterœ,œidœ:œdate_field_filter-MZjp2œ,œnameœ:œdataœ,œoutput_typesœ:[œComponentœ]}-CustomComponent-Rurny{œfieldNameœ:œfieldsœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "date_field_filter-MZjp2",
        "sourceHandle": "{œdataTypeœ:œdate_field_filterœ,œidœ:œdate_field_filter-MZjp2œ,œnameœ:œdataœ,œoutput_typesœ:[œComponentœ]}",
        "target": "CustomComponent-Rurny",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Text",
            "id": "Text-KFevp",
            "name": "factory",
            "output_types": [
              "Component"
            ]
          },
          "targetHandle": {
            "fieldName": "fields",
            "id": "CustomComponent-Rurny",
            "inputTypes": [
              "Component"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__Text-KFevp{œdataTypeœ:œTextœ,œidœ:œText-KFevpœ,œnameœ:œfactoryœ,œoutput_typesœ:[œComponentœ]}-CustomComponent-Rurny{œfieldNameœ:œfieldsœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Text-KFevp",
        "sourceHandle": "{œdataTypeœ:œTextœ,œidœ:œText-KFevpœ,œnameœ:œfactoryœ,œoutput_typesœ:[œComponentœ]}",
        "target": "CustomComponent-Rurny",
        "targetHandle": "{œfieldNameœ:œfieldsœ,œidœ:œCustomComponent-Rurnyœ,œinputTypesœ:[œComponentœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-3PSlD",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "message",
            "id": "CustomComponent-cjOAX",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__ChatInput-3PSlD{œdataTypeœ:œChatInputœ,œidœ:œChatInput-3PSlDœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-CustomComponent-cjOAX{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-cjOAXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-3PSlD",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-3PSlDœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "CustomComponent-cjOAX",
        "targetHandle": "{œfieldNameœ:œmessageœ,œidœ:œCustomComponent-cjOAXœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "description": "Retrieve paths from a folder.",
          "display_name": "Directory Paths",
          "id": "DirectoryPath-0teKE",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Retrieve paths from a folder.",
            "display_name": "Directory Paths",
            "documentation": "",
            "edited": true,
            "field_order": [
              "path",
              "types",
              "depth",
              "load_hidden",
              "recursive",
              "silent_errors"
            ],
            "frozen": false,
            "icon": "folder",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "load_directory",
                "name": "data",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import (\n    TEXT_FILE_TYPES,\n    retrieve_file_paths,\n)\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, IntInput, MessageTextInput, MultiselectInput\nfrom langflow.schema import Data\nfrom langflow.template import Output\n\n\nclass DirectoryPathComponent(Component):\n    display_name = \"Directory Paths\"\n    description = \"Retrieve paths from a folder.\"\n    icon = \"folder\"\n    name = \"DirectoryPath\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"path\",\n            display_name=\"Path\",\n            info=\"Path to the directory to load files from. Defaults to current directory ('.')\",\n            value=\".\",\n            input_types=[\"Message\"],\n            tool_mode=True,\n        ),\n        MultiselectInput(\n            name=\"types\",\n            display_name=\"File Types\",\n            info=\"File types to load. Select one or more types or leave empty to load all supported types.\",\n            options=TEXT_FILE_TYPES,\n            value=[],\n        ),\n        IntInput(\n            name=\"depth\",\n            display_name=\"Depth\",\n            advanced=True,\n            info=\"Depth to search for files.\",\n            value=0,\n        ),\n        BoolInput(\n            name=\"load_hidden\",\n            display_name=\"Load Hidden\",\n            advanced=True,\n            info=\"If true, hidden files will be loaded.\",\n        ),\n        BoolInput(\n            name=\"recursive\",\n            display_name=\"Recursive\",\n            advanced=True,\n            info=\"If true, the search will be recursive.\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_directory\"),\n    ]\n\n    def load_directory(self) -> list[Data]:\n        path = self.path\n        types = self.types\n        depth = self.depth\n        load_hidden = self.load_hidden\n        recursive = self.recursive\n\n        resolved_path = self.resolve_path(path)\n\n        if not types:\n            types = TEXT_FILE_TYPES\n\n        invalid_types = [t for t in types if t not in TEXT_FILE_TYPES]\n        if invalid_types:\n            msg = f\"Invalid file types specified: {invalid_types}. Valid types are: {TEXT_FILE_TYPES}\"\n            raise ValueError(msg)\n\n        valid_types = types\n\n        file_paths = retrieve_file_paths(\n            resolved_path,\n            load_hidden=load_hidden,\n            recursive=recursive,\n            depth=depth,\n            types=valid_types,\n        )\n\n        return file_paths\n"
              },
              "depth": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Depth",
                "dynamic": false,
                "info": "Depth to search for files.",
                "list": false,
                "list_add_label": "Add More",
                "name": "depth",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "load_hidden": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Load Hidden",
                "dynamic": false,
                "info": "If true, hidden files will be loaded.",
                "list": false,
                "list_add_label": "Add More",
                "name": "load_hidden",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "path": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Path",
                "dynamic": false,
                "info": "Path to the directory to load files from. Defaults to current directory ('.')",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "recursive": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Recursive",
                "dynamic": false,
                "info": "If true, the search will be recursive.",
                "list": false,
                "list_add_label": "Add More",
                "name": "recursive",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "silent_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "list_add_label": "Add More",
                "name": "silent_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "types": {
                "_input_type": "MultiselectInput",
                "advanced": false,
                "combobox": false,
                "display_name": "File Types",
                "dynamic": false,
                "info": "File types to load. Select one or more types or leave empty to load all supported types.",
                "list": true,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "types",
                "options": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": [
                  "pdf"
                ]
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DirectoryPath"
        },
        "dragging": false,
        "id": "DirectoryPath-0teKE",
        "measured": {
          "height": 311,
          "width": 320
        },
        "position": {
          "x": -4738.056100813796,
          "y": -212.68421987698196
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Filters the specified forms based on the specified criteria.",
          "display_name": "Form Filter",
          "id": "FormFilter-l4kl0",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Filters the specified forms based on the specified criteria.",
            "display_name": "Form Filter",
            "documentation": "",
            "edited": true,
            "field_order": [
              "paths",
              "fields",
              "output_keys"
            ],
            "frozen": false,
            "icon": "filter",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_data",
                "name": "data_list",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Paths",
                "hidden": null,
                "method": "build_paths",
                "name": "paths_list",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.docbuilder import docbuilder\nfrom langflow.inputs import Input\nfrom langflow.inputs.inputs import DataInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\n\nclass File:\n    def __init__(self):\n        self.builder = None\n        self.context = None\n\n        # js objects\n        self.globalObj = None\n        self.api = None\n        self.document = None\n        self.forms = None\n\n    def open(self, file_path, params=\"\") -> bool:\n        self.builder = docbuilder.CDocBuilder()\n\n        res = self.builder.OpenFile(file_path, params)\n        if res != 0:\n            return False\n\n        self.context: docbuilder.CDocBuilderContext = self.builder.GetContext()\n        self.globalObj: docbuilder.CDocBuilderValue = self.context.GetGlobal()\n        self.Api: docbuilder.CDocBuilderValue | None = self.globalObj[\"Api\"]\n        self.document: docbuilder.CDocBuilderValue | None = self.Api.GetDocument()\n        self.getAllForms()\n        return True\n\n    def close(self):\n        if self.context is None:\n            return\n        del self.forms\n        del self.document\n        del self.api\n        del self.globalObj\n        del self.context\n        self.context = None\n        self.builder.CloseFile()\n\n    def getAllForms(self):\n        if self.context is None:\n            return []\n        if self.forms is None:\n            self.forms = self.document.GetAllForms()\n        return self.forms\n\n    def getFormsByTag(self, tag):\n        if self.context is None:\n            return []\n        return self.document.GetFormsByTag(tag)\n\n    def getFormsByKey(self, key):\n        if self.context is None:\n            return []\n        result = []\n        for form in self.forms:\n            if form.GetFormKey().ToString() == key:\n                result.append(form)\n        return result\n\n    def getFormsByKeyTag(self, key, tag=None):\n        if self.context is None:\n            return []\n        key_tag_forms = self.forms\n        if tag:\n            key_tag_forms = self.getFormsByTag(tag)\n        result = []\n        for form in key_tag_forms:\n            if form.GetFormKey().ToString() == key:\n                result.append(form)\n        return result\n\n    def getFormValue(self, form):\n        form_type = form.GetFormType().ToString()\n        if form_type == \"textForm\":\n            return form.GetText().ToString()\n        elif form_type == \"dateForm\":\n            return form.GetTime().ToDouble()\n        elif form_type == \"checkBoxForm\":\n            return form.IsChecked().ToBool()\n        elif form_type == \"radioButtonForm\":\n            return form.IsChecked().ToBool()\n        elif form_type == \"comboBoxForm\":\n            return form.GetText().ToString()\n        elif form_type == \"dropDownForm\":\n            return form.GetText().ToString()\n        return None\n\n    def getFormValueByKey(self, key, tag=None):\n        forms_check = self.getFormsByKeyTag(key, tag)\n        count = len(forms_check)\n\n        if 0 == count:\n            return None\n        if 1 == count:\n            return self.getFormValue(forms_check[0])\n\n        choice = \"\"\n        for form in forms_check:\n            form_type = form.GetFormType().ToString()\n            if \"radioButtonForm\" != form_type:\n                return self.getFormValue(form)\n            if form.IsChecked().ToBool():\n                choice = form.GetChoiceName()\n        return choice\n\n    def getRadioButtonValue(self, key):\n        for form in self.forms:\n            if form.GetFormKey().ToString() == key:\n                form_type = form.GetFormType().ToString()\n                if form_type == \"checkBoxForm\" or form_type == \"radioButtonForm\":\n                    if form.IsChecked().ToBool():\n                        return form.GetChoiceName().ToString()\n        return None\n\n    def __del__(self):\n        self.close()\n\n\nclass FormFilterComponent(Component):\n    display_name: str = \"Form Filter\"\n    description: str = \"Filters the specified forms based on the specified criteria.\"\n    name: str = \"FormFilter\"\n    icon = \"filter\"\n    inputs = [\n        DataInput(\n            name=\"paths\",\n            display_name=\"File Paths\",\n            info=\"List of file paths to process.\",\n            is_list=True,\n            required=True,\n        ),\n        Input(\n            name=\"fields\",\n            display_name=\"Criteria\",\n            input_types=[\"Component\"],\n            component=Component,\n            is_list=True,\n        ),\n        DataInput(\n            name=\"output_keys\",\n            display_name=\"Output keys\",\n            info=\"List of fields to extract from the files.\",\n            input_types=[\"Data\"],\n            value=None,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data_list\", method=\"build_data\"),\n        Output(display_name=\"Paths\", name=\"paths_list\", method=\"build_paths\"),\n    ]\n\n    def build_main(self) -> list:\n        file_paths: list[str] = self.paths\n        filters: list[Component] = self.fields\n        output_keys = self.output_keys.data[\"output_keys\"] if self.output_keys else None\n        result = []\n\n        for file_path in file_paths:\n            if isinstance(file_path, Data):\n                file_path = file_path.text\n\n            file = File()\n            if not file.open(file_path):\n                continue\n\n            passed = True\n            for filter_component in filters:\n                if hasattr(filter_component, \"process\"):\n                    if not filter_component.process(file):\n                        passed = False\n                        break\n            if passed:\n                record = {\"file_path\": file_path}\n                if output_keys:\n                    for key in output_keys:\n                        record[key] = file.getFormValueByKey(key)\n                result.append(record)\n            file.close()\n\n        return result\n\n    def build_data(self) -> Data:\n        processed_data = self.build_main()\n        return Data(data={\"items\": processed_data})\n\n    def build_paths(self) -> list[Data]:\n        processed_data = self.build_main()\n        file_paths = [record[\"file_path\"] for record in processed_data]\n        return file_paths\n"
              },
              "fields": {
                "advanced": false,
                "display_name": "Criteria",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [
                  "Component"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "fields",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str"
              },
              "output_keys": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Output keys",
                "dynamic": false,
                "info": "List of fields to extract from the files.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "output_keys",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other"
              },
              "paths": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "File Paths",
                "dynamic": false,
                "info": "List of file paths to process.",
                "input_types": [
                  "Data"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "paths",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "FormFilter"
        },
        "dragging": false,
        "id": "FormFilter-l4kl0",
        "measured": {
          "height": 393,
          "width": 320
        },
        "position": {
          "x": -4117.471000427817,
          "y": -146.7807082757529
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "description": "Converts data into text.",
          "display_name": "Data To Text",
          "id": "DataToText-BI4S9",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Converts data into text.",
            "display_name": "Data To Text",
            "documentation": "",
            "edited": false,
            "field_order": [
              "dict_list"
            ],
            "frozen": false,
            "icon": "braces",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "hidden": false,
                "method": "build_output",
                "name": "text",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.io import DataInput, Output\nfrom langflow.schema import Message\n\n\nclass DataToTextComponent(Component):\n    display_name = \"Data To Text\"\n    name = \"DataToText\"\n    icon = \"braces\"\n    description: str = \"Converts data into text.\"\n    inputs = [\n        DataInput(\n            name=\"dict_list\",\n            display_name=\"Data\",\n            info=\"List of dictionaries to process.\",\n            input_types=[\"Data\"],\n            required=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"build_output\"),\n    ]\n\n    def get_text_from_processed_data(self, processed_data: list[str]) -> str:\n        \"\"\"Convert processed_data into a readable text format.\"\"\"\n        text_lines = []\n        for person in processed_data:\n            for key, record in person.items():\n                text_lines.append(f\"  {key}: {record}\")\n                text_lines.append(\"\")\n\n        return \"\\n\".join(text_lines)\n\n    def build_output(self) -> Message:\n        fields = self.dict_list.data[\"items\"]\n        text = f\"{self.get_text_from_processed_data(fields)}\"\n        message = Message(\n            text=text,\n        )\n        return message\n"
              },
              "dict_list": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "List of dictionaries to process.",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "dict_list",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "DataToText"
        },
        "dragging": false,
        "id": "DataToText-BI4S9",
        "measured": {
          "height": 191,
          "width": 320
        },
        "position": {
          "x": -3576.114796602196,
          "y": 65.22078611188815
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatOutput-Ru7U9",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display a chat message in the Playground.",
            "display_name": "Chat Output",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color",
              "clean_data"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "clean_data": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Basic Clean Data",
                "dynamic": false,
                "info": "Whether to clean the data",
                "list": false,
                "list_add_label": "Add More",
                "name": "clean_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from collections.abc import Generator\nfrom typing import Any\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.inputs.inputs import HandleInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema.data import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        HandleInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n            input_types=[\"Data\", \"DataFrame\", \"Message\"],\n            required=True,\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"clean_data\",\n            display_name=\"Basic Clean Data\",\n            value=True,\n            info=\"Whether to clean the data\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            # Handle case where source is a ChatOpenAI object\n            if hasattr(source, \"model_name\"):\n                source_dict[\"source\"] = source.model_name\n            elif hasattr(source, \"model\"):\n                source_dict[\"source\"] = str(source.model)\n            else:\n                source_dict[\"source\"] = str(source)\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        # First convert the input to string if needed\n        text = self.convert_to_string()\n        # Get source properties\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n\n        # Create or use existing Message object\n        if isinstance(self.input_value, Message):\n            message = self.input_value\n            # Update message properties\n            message.text = text\n        else:\n            message = Message(text=text)\n\n        # Set message properties\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n\n        # Store message if needed\n        if self.session_id and self.should_store_message:\n            stored_message = await self.send_message(message)\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n\n    def _validate_input(self) -> None:\n        \"\"\"Validate the input data and raise ValueError if invalid.\"\"\"\n        if self.input_value is None:\n            msg = \"Input data cannot be None\"\n            raise ValueError(msg)\n        if isinstance(self.input_value, list) and not all(\n            isinstance(item, Message | Data | DataFrame | str) for item in self.input_value\n        ):\n            invalid_types = [\n                type(item).__name__\n                for item in self.input_value\n                if not isinstance(item, Message | Data | DataFrame | str)\n            ]\n            msg = f\"Expected Data or DataFrame or Message or str, got {invalid_types}\"\n            raise TypeError(msg)\n        if not isinstance(\n            self.input_value,\n            Message | Data | DataFrame | str | list | Generator | type(None),\n        ):\n            type_name = type(self.input_value).__name__\n            msg = f\"Expected Data or DataFrame or Message or str, Generator or None, got {type_name}\"\n            raise TypeError(msg)\n\n    def _safe_convert(self, data: Any) -> str:\n        \"\"\"Safely convert input data to string.\"\"\"\n        try:\n            if isinstance(data, str):\n                return data\n            if isinstance(data, Message):\n                return data.get_text()\n            if isinstance(data, Data):\n                if data.get_text() is None:\n                    msg = \"Empty Data object\"\n                    raise ValueError(msg)\n                return data.get_text()\n            if isinstance(data, DataFrame):\n                if self.clean_data:\n                    # Remove empty rows\n                    data = data.dropna(how=\"all\")\n                    # Remove empty lines in each cell\n                    data = data.replace(r\"^\\s*$\", \"\", regex=True)\n                    # Replace multiple newlines with a single newline\n                    data = data.replace(r\"\\n+\", \"\\n\", regex=True)\n\n                # Replace pipe characters to avoid markdown table issues\n                processed_data = data.replace(r\"\\|\", r\"\\\\|\", regex=True)\n\n                processed_data = processed_data.map(\n                    lambda x: str(x).replace(\"\\n\", \"<br/>\") if isinstance(x, str) else x\n                )\n\n                return processed_data.to_markdown(index=False)\n            return str(data)\n        except (ValueError, TypeError, AttributeError) as e:\n            msg = f\"Error converting data: {e!s}\"\n            raise ValueError(msg) from e\n\n    def convert_to_string(self) -> str | Generator[Any, None, None]:\n        \"\"\"Convert input data to string with proper error handling.\"\"\"\n        self._validate_input()\n        if isinstance(self.input_value, list):\n            return \"\\n\".join([self._safe_convert(item) for item in self.input_value])\n        if isinstance(self.input_value, Generator):\n            return self.input_value\n        return self._safe_convert(self.input_value)\n"
              },
              "data_template": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Data Template",
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "data_template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "{text}"
              },
              "input_value": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "AI"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatOutput"
        },
        "dragging": false,
        "id": "ChatOutput-Ru7U9",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": -3093.5646334650583,
          "y": 162.4132960866415
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Exist-PUM8R",
          "node": {
            "base_classes": [
              "Component"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Check if key-tag pair exists in file",
            "display_name": "Exist Key Filter",
            "documentation": "",
            "edited": true,
            "field_order": [],
            "frozen": false,
            "icon": "table",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Result",
                "hidden": false,
                "method": "build_output",
                "name": "result",
                "options": null,
                "required_inputs": null,
                "selected": "Component",
                "tool_mode": true,
                "types": [
                  "Component"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.io import Output\n\nclass ExistComponent(Component):\n    display_name = \"Exist Key Filter\"\n    name = \"exist\"\n    icon = \"table\"\n    description: str = \"Check if key-tag pair exists in file\"\n    \n\n    def __init__(self, key: str = None, tag: str = None, **kwargs):\n        super().__init__(**kwargs)\n        self.key = key\n        self.tag = tag\n    \n    outputs = [\n        Output(display_name=\"Result\", name=\"result\", method=\"build_output\")\n    ]\n\n    def process(self, file) -> bool:\n        forms = file.getFormsByKeyTag(self.key, self.tag)\n        return len(forms) > 0\n\n    @classmethod\n    def create_instance(cls, key: str, tag: str) -> 'ExistComponent':\n        return cls(key=key, tag=tag)\n        \n    def build_output(self) -> Component:\n        return {\"name\":self.name,\"Factory Method\":self.create_instance}"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "exist"
        },
        "dragging": false,
        "id": "Exist-PUM8R",
        "measured": {
          "height": 147,
          "width": 320
        },
        "position": {
          "x": -5589.978124414795,
          "y": 210.97687440397067
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "check_box-rO2zv",
          "node": {
            "base_classes": [
              "Component"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Determines which checkboxes from the list have been checked",
            "display_name": "Checkbox Filter",
            "documentation": "",
            "edited": true,
            "field_order": [],
            "frozen": false,
            "icon": "check-square",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Factory",
                "hidden": false,
                "method": "build_output",
                "name": "factory",
                "options": null,
                "required_inputs": null,
                "selected": "Component",
                "tool_mode": true,
                "types": [
                  "Component"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs.inputs import BoolInput, MessageTextInput\nfrom langflow.io import Output\n\nclass CheckBoxComponent(Component):\n    display_name = \"Checkbox Filter\"\n    name = \"check_box\"\n    icon = \"check-square\"\n    description: str = \"Determines which checkboxes from the list have been checked\"\n    \n\n    def __init__(\n        self,\n        key: str = None,\n        tag: str = None,\n        checked: bool = True,\n        **kwargs\n    ):\n        super().__init__(**kwargs)\n        self.key = key\n        self.tag = tag\n        self.checked = checked\n\n    outputs = [\n        Output(display_name=\"Factory\", name=\"factory\", method=\"build_output\")\n    ]\n\n    def process(self, file) -> bool:\n        #raise Exception(f\"{self.checked=},{self.key=},{self.tag=},{file.getFormValueByKey(self.key, self.tag)=}\")\n        return self.checked == file.getFormValueByKey(self.key, self.tag)\n\n    @classmethod\n    def create_instance(\n        cls,\n        key: str,\n        tag: str = None,\n        checked: bool = True\n    ) -> 'CheckBoxComponent':\n        return cls(\n            key=key,\n            tag=tag,\n            checked=checked\n        )\n\n    def build_output(self) -> Component:\n        return {\n            \"name\": self.name,\n            \"Factory Method\": self.create_instance,\n        }"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "check_box"
        },
        "dragging": false,
        "id": "check_box-rO2zv",
        "measured": {
          "height": 167,
          "width": 320
        },
        "position": {
          "x": -5646.5026891875505,
          "y": 409.1900350070824
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "date_field_filter-MZjp2",
          "node": {
            "base_classes": [
              "Component"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Returns the date range, along with the corresponding keys.",
            "display_name": "Date Filter",
            "documentation": "",
            "edited": true,
            "field_order": [],
            "frozen": false,
            "icon": "clock",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Data",
                "hidden": false,
                "method": "build_output",
                "name": "data",
                "options": null,
                "required_inputs": null,
                "selected": "Component",
                "tool_mode": true,
                "types": [
                  "Component"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from datetime import datetime\nfrom typing import Optional\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.io import Output\n\n\nclass DateKeyComponent(Component):\n    display_name: str = \"Date Filter\"\n    description: str = \"Returns the date range, along with the corresponding keys.\"\n    name: str = \"date_field_filter\"\n    icon = \"clock\"\n\n    def __init__(self,key_1:str=None,tag_1:str=None,field_1:str=None,key_2:str=None,tag_2:str=None,field_2:str=None, **kwargs):\n        super().__init__(**kwargs)\n        self.key_1: str = key_1\n        self.tag_1: str = tag_1\n        self.field_1: str = field_1\n        self.key_2: str = key_2\n        self.tag_2: str = tag_2\n        self.field_2: str = field_2\n        \n    outputs = [\n        Output(\n            display_name=\"Data\",\n            name=\"data\",\n            method=\"build_output\",\n        ),\n    ]\n    def parse_date(self, date_str) -> int:\n        if not date_str:\n            return None\n        try:\n            dt = datetime.strptime(str(date_str), \"%d/%m/%Y\")\n            return float(dt.timestamp()) * 1000\n        except (TypeError, ValueError) as e:\n            msg = f\"Can't parse '{date_str}' as date: {e!s}\"\n            raise ValueError(msg) from e\n\n    def get_field_names(self) -> list[str | None]:\n        return [\n            self.key_1,\n            self.tag_1,\n            self.field_1,\n            self.key_2,\n            self.tag_2,\n            self.field_2\n        ]\n\n    def process(self, file) -> bool:\n        config_values: list[str] = self.get_field_names()\n        key1, tag1, from_date_str, key2, tag2, to_date_str = config_values\n\n        if not key1 and not key2:\n            return False\n\n        input_from_date: int | None = self.parse_date(from_date_str)\n        input_to_date: int | None = self.parse_date(to_date_str)\n        file_to_date: int | None = file.getFormValueByKey(key2, tag2)\n        file_from_date: int | None = file.getFormValueByKey(key1, tag1)\n        \n        if all([input_to_date, input_from_date, file_from_date, file_to_date]):\n            return (input_from_date < file_from_date) and (file_to_date < input_to_date)\n        elif input_from_date and file_from_date:\n            return input_from_date < file_from_date\n        elif input_to_date and file_to_date:\n            return file_to_date < input_to_date\n        else:\n            return False\n\n    @classmethod\n    def create_instance(\n        cls,\n        key_1: str,\n        tag_1: str = None,\n        field_1: str = None,\n        key_2: str = None,\n        tag_2: str = None,\n        field_2: str = None\n    ) -> 'DateKeyComponent':\n        return cls(\n            key_1=key_1,\n            tag_1=tag_1,\n            field_1=field_1,\n            key_2=key_2,\n            tag_2=tag_2,\n            field_2=field_2\n        )\n        \n    def build_output(self) -> Component:\n        return {\n            \"name\": self.name,\n            \"Factory Method\": self.create_instance,\n        }\n\n"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "date_field_filter"
        },
        "dragging": false,
        "id": "date_field_filter-MZjp2",
        "measured": {
          "height": 167,
          "width": 320
        },
        "position": {
          "x": -5579.442191872809,
          "y": 650.2238022362296
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Text-KFevp",
          "node": {
            "base_classes": [
              "Component"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Check if text value matches form data",
            "display_name": "Text Key Filter",
            "documentation": "",
            "edited": true,
            "field_order": [],
            "frozen": false,
            "icon": "table",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Factory",
                "hidden": false,
                "method": "build_output",
                "name": "factory",
                "options": null,
                "required_inputs": null,
                "selected": "Component",
                "tool_mode": true,
                "types": [
                  "Component"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs.inputs import MessageTextInput\nfrom langflow.io import Output\n\nclass ExistComponent(Component):\n    display_name = \"Text Key Filter\"\n    name = \"Text\"\n    icon = \"table\"\n    description: str = \"Check if text value matches form data\"\n    \n\n    def __init__(\n        self,\n        key: str = None,\n        tag: str = None,\n        value: str = None,\n        **kwargs\n    ):\n        super().__init__(**kwargs)\n        self.key = key\n        self.tag = tag\n        self.value = value\n\n    \n    outputs = [\n        Output(display_name=\"Factory\", name=\"factory\", method=\"build_output\")\n    ]\n\n    def process(self, file) -> bool:\n        return str(self.value) == str(file.getFormValueByKey(self.key, self.tag))\n\n    @classmethod\n    def create_instance(\n        cls,\n        key: str,\n        tag: str = None,\n        value: str = None\n    ) -> 'ExistComponent':\n        return cls(\n            key=key,\n            tag=tag,\n            value=value\n        )\n\n    def build_output(self) -> Component:\n        return {\n            \"name\": self.name,\n            \"Factory Method\": self.create_instance,\n        }"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Text"
        },
        "dragging": false,
        "id": "Text-KFevp",
        "measured": {
          "height": 147,
          "width": 320
        },
        "position": {
          "x": -5581.247946684718,
          "y": 898.016552864318
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-cjOAX",
          "node": {
            "base_classes": [
              "Data",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Split message to path, filters and output fields.",
            "display_name": "ParsePathKey",
            "documentation": "",
            "edited": true,
            "field_order": [
              "message"
            ],
            "frozen": false,
            "icon": "message-square-share",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Directory",
                "hidden": false,
                "method": "get_directory",
                "name": "directory",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Key",
                "hidden": false,
                "method": "get_key",
                "name": "key",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output_key",
                "hidden": false,
                "method": "get_output_key",
                "name": "output_key",
                "options": null,
                "required_inputs": null,
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import json\nimport re\n\nfrom langflow.custom import Component\nfrom langflow.io import MessageInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom loguru import logger\n\n\nclass ParsePathKeyComponent(Component):\n    display_name = \"ParsePathKey\"\n    description = \"Split message to path, filters and output fields.\"\n    icon = \"message-square-share\"\n    name = \"ParsePathKey\"\n\n    inputs = [\n        MessageInput(\n            name=\"message\",\n            display_name=\"Message\",\n            info=\"The Message object containing structured text with path, filters and output fields\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Directory\", name=\"directory\", method=\"get_directory\"),\n        Output(display_name=\"Key\", name=\"key\", method=\"get_key\"),\n        Output(display_name=\"Output_key\", name=\"output_key\", method=\"get_output_key\"),\n    ]\n\n    def _parse_message(self):\n        \"\"\"Parse message into components: path, filters, and output fields\"\"\"\n        if not hasattr(self, 'message') or self.message is None:\n            logger.error(\"No message provided\")\n            return None, None, None\n\n        if isinstance(self.message, Message):\n            message_text = str(self.message.text).strip()\n            #raise Exception(f\"{message_text=}\")\n            try:\n                path_match = re.search(r'path:\\s*([^;]+)', message_text)\n                path = path_match.group(1).strip() if path_match else \"\"\n                \n                filters_match = re.search(r'filters:\\s*(\\[.+?\\])', message_text, re.DOTALL)\n                filters_str = filters_match.group(1) if filters_match else \"[]\"\n                \n                filters_str = filters_str.replace(\"'\", '\"')\n                filters_str = re.sub(r'(\\w+):', r'\"\\1\":', filters_str)\n                filters = json.loads(filters_str)\n                \n                output_match = re.search(r'output:\\s*(\\[.+?\\])', message_text, re.DOTALL)\n                output_str = output_match.group(1) if output_match else \"[]\"\n                output_str = output_str.replace(\"'\", '\"')\n                output_str = re.sub(r'(\\w+)', r'\"\\1\"', output_str.replace('\"', ''))\n                output_fields = json.loads(output_str)\n                #raise Exception(f\"{path_match=},{filters_str=},{output_str=}\")\n                return path, filters, output_fields\n            \n            except Exception as e:\n                raise Exception(f\"Error parsing message: {str(e)}\")\n                logger.error(f\"Message text: {message_text}\")\n                return \"\", [], []\n                \n        return \"\", [], []\n\n    def get_directory(self) -> Message:\n        \"\"\"Return the directory path\"\"\"\n        path, _, _ = self._parse_message()\n        return Message(text=path)\n        \n    def get_key(self) -> Data:\n        \"\"\"Return filters configuration\"\"\"\n        _, filters, _ = self._parse_message()\n        return Data(data={\"filters\":filters})\n        \n    def get_output_key(self) -> Data:\n        \"\"\"Return output fields\"\"\"\n        _, _, output_fields = self._parse_message()\n        return Data(data={\"output_keys\":output_fields})"
              },
              "message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Message",
                "dynamic": false,
                "info": "The Message object containing structured text with path, filters and output fields",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ParsePathKey"
        },
        "dragging": false,
        "id": "CustomComponent-cjOAX",
        "measured": {
          "height": 325,
          "width": 320
        },
        "position": {
          "x": -5610.851164238248,
          "y": -217.7262946662668
        },
        "selected": true,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-Rurny",
          "node": {
            "base_classes": [
              "Component"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Creates filter objects from filter configurations and component factory methods",
            "display_name": "Tools executor",
            "documentation": "",
            "edited": true,
            "field_order": [
              "data_input",
              "fields"
            ],
            "frozen": false,
            "icon": "code",
            "legacy": false,
            "lf_version": "1.4.1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Exit",
                "hidden": false,
                "method": "exist_output",
                "name": "exist_output",
                "options": null,
                "required_inputs": null,
                "selected": "Component",
                "tool_mode": true,
                "types": [
                  "Component"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom import Component\nfrom langflow.inputs import Input\nfrom langflow.io import DataInput, Output\n\n\nclass ToolsExecutorComponent(Component):\n    display_name = \"Tools executor\"\n    description = \"Creates filter objects from filter configurations and component factory methods\"\n    icon = \"code\"\n    name = \"ToolsExecutor\"\n\n    inputs = [\n        DataInput(\n            name=\"data_input\",\n            display_name=\"Data\",\n            info=\"Filter configurations\",\n        ),\n        Input(\n            name=\"fields\",\n            display_name=\"Criteria\",\n            input_types=[\"Component\"],\n            component=Component,\n            is_list=True,\n            info=\"List of filter components with factory methods\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Exit\", name=\"exist_output\", method=\"exist_output\"),\n    ]\n\n    def exist_output(self) -> Component:\n        filter_configs = []\n        filter_configs = self.data_input.data\n        \n        factory_methods = {}\n        for component in self.fields:\n            if isinstance(component, dict) and \"name\" in component and \"Factory Method\" in component:\n                component_name = component[\"name\"]\n                factory_method = component[\"Factory Method\"]\n                factory_methods[component_name] = factory_method\n        filters = []\n        \n        for config in filter_configs[\"filters\"]:\n            if not isinstance(config, dict):\n                raise Exception(f\"Invalid filter config: {config}\")\n            \n            filter_type = config[\"type\"]\n\n            \n            factory = None\n            if filter_type in factory_methods:\n                factory = factory_methods[filter_type]\n            \n            if not factory:\n                raise Exception(f\"Factory method not found for filter type: {filter_type}\")\n            \n            try:\n                if filter_type == \"exist\":\n                    key = config[\"key\"]\n                    tag = config[\"tag\"]\n                    filter_obj = factory(key=key, tag=tag)\n                elif filter_type == \"check_box\":\n                    key = config[\"key\"]\n                    tag = config[\"tag\"]\n                    value = config[\"value\"]\n                    bool_value = value.lower() == \"true\"\n                    filter_obj = factory(key=key, tag=tag, checked=bool_value)\n                \n                elif filter_type == \"date_field_filter\":\n                    key_1 = config[\"key_1\"]\n                    tag_1 = config[\"tag_1\"]\n                    field_1 = config[\"field_1\"]\n                    key_2 = config[\"key_2\"]\n                    tag_2 = config[\"tag_2\"]\n                    field_2=config[\"field_2\"]\n                    filter_obj = factory(\n                        key_1=key_1,\n                        tag_1=tag_1,\n                        field_1=field_1,\n                        key_2=key_2,\n                        tag_2=tag_2,\n                        field_2=field_2\n                    )\n                \n                elif filter_type == \"text\":\n                    key = config[\"key\"]\n                    tag = config[\"tag\"]\n                    text_value = config[\"text\"]\n                    filter_obj = factory(key=key, tag=tag, value=text_value)\n                \n                else:\n                    raise Exception(f\"Unknown filter type: {filter_type}\")\n                    \n                filters.append(filter_obj)\n                \n                \n            except Exception as e:\n                raise Exception(f\"Error creating filter object: {str(e)}\")\n        \n        return filters\n"
              },
              "data_input": {
                "_input_type": "DataInput",
                "advanced": false,
                "display_name": "Data",
                "dynamic": false,
                "info": "Filter configurations",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "data_input",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "fields": {
                "advanced": false,
                "display_name": "Criteria",
                "dynamic": false,
                "fileTypes": [],
                "file_path": "",
                "info": "List of filter components with factory methods",
                "input_types": [
                  "Component"
                ],
                "list": true,
                "load_from_db": false,
                "multiline": false,
                "name": "fields",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": [
                  ""
                ]
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "ToolsExecutor"
        },
        "dragging": false,
        "id": "CustomComponent-Rurny",
        "measured": {
          "height": 301,
          "width": 320
        },
        "position": {
          "x": -4755.826925871059,
          "y": 242.70977938355009
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "ChatInput-3PSlD",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "metadata": {},
            "minimized": true,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "background_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Background Color",
                "dynamic": false,
                "info": "The background color of the icon.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "background_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chat_icon": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Icon",
                "dynamic": false,
                "info": "The icon of the message.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chat_icon",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n            temp_file=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
              },
              "files": {
                "_input_type": "FileInput",
                "advanced": true,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "file_path": "",
                "info": "Files to be sent with the message.",
                "list": true,
                "list_add_label": "Add More",
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "text_color": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Text Color",
                "dynamic": false,
                "info": "The text color of the name",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "text_color",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": false,
          "type": "ChatInput"
        },
        "dragging": false,
        "id": "ChatInput-3PSlD",
        "measured": {
          "height": 66,
          "width": 192
        },
        "position": {
          "x": -6087.062930524178,
          "y": -121.50518827121844
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 2222.9229487854627,
      "y": 240.7471897155469,
      "zoom": 0.3559882612547364
    }
  },
  "description": "Powerful Prompts, Perfectly Positioned.",
  "endpoint_name": null,
  "folder_id": "3ff9e0f6-f1b6-4c6d-8b6a-8fb1b864491a",
  "fs_path": null,
  "gradient": null,
  "icon": null,
  "icon_bg_color": null,
  "id": "cd59e2ce-c355-4b05-adf1-a58a6a7aab6a",
  "is_component": false,
  "locked": false,
  "mcp_enabled": true,
  "name": "mcp_exist_form",
  "tags": [],
  "updated_at": "2025-05-23T14:10:59+00:00",
  "user_id": "342acb18-c0ac-4d3e-8239-e941b4676372",
  "webhook": false
}